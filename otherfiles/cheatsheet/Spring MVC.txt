-->1.Spring MVCA Spring MVC is a Java framework which is used to build web applications. It follows the Model-View-Controller design pattern. It implements all the basic features of a core spring framework like Inversion of Control, Dependency Injection.A Spring MVC provides an elegant solution to use MVC in spring framework by the help of DispatcherServlet. Here, DispatcherServlet is aclass that receives the incoming request and maps it to the right resource such as controllers, models, and views.1.Model - A model contains the data of the application. A data can be a single object or a collection of objects.2.Controller - A controller contains the business logic of an application. Here, the @Controller annotation is used to mark the class as the controller.3.View - A view represents the provided information in a particular format. Generally, JSP+JSTL is used to create a view page. Although spring also supports other view technologies such as Apache Velocity, Thymeleaf and FreeMarker.4.Front Controller - In Spring Web MVC, the DispatcherServlet class works as the front controller. It is responsible to manage the flow of the Spring MVC application.spring mvc view page:In spring MVC multiple view pagesspring mvc Multiple controller:In spring MVC multiple controller @Request controller@request mapping@request param is used for join the jsp page-->2.MVC FORM taglib:FORM tag lib:<%@ taglib prefix="form" uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>Form Tag	     Descriptionform:form	     It is a container tag that contains all other form tags.form:input	     This tag is used to generate the text field.form:radiobutton This tag is used to generate the radio buttons.form:checkbox	 This tag is used to generate the checkboxes.form:password	 This tag is used to generate the password input field.form:select	     This tag is used to generate the drop-down list.form:textarea	 This tag is used to generate the multi-line text field.form:hidden	     This tag is used to generate the hidden input field.Form Example:    <form action="satish" method="post">		<input type="text" name="userName"><br> 		<input type="submit" value="Login">	</form>spring mvc text field:<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>  <!DOCTYPE html>  <html>  <head>      <title>Reservation Form</title>  </head>  <h3>Railway Reservation Form</h3>  <body>      <form:form action="submitForm" modelAttribute="reservation">          First name: <form:input path="firstName" />                 <br><br>          Last name: <form:input path="lastName" />          <br><br>          <input type="submit" value="Submit" />          </form:form>  </body>  </html>  All concept of tag library:<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>  <!DOCTYPE html>  <html>  <head>      <title>Reservation Form</title>  </head>  <h3>Railway Reservation Form</h3>  <body>      <form:form action="submitForm" modelAttribute="reservation">          First name: <form:input path="firstName" />                 <br><br>          Last name: <form:input path="lastName" />          <br><br>          Gender:           Male<form:radiobutton path="Gender" value="Male"/>          Female<form:radiobutton path="Gender" value="Female"/>          <br><br>          Meals:          BreakFast<form:checkbox path="Food" value="BreakFast"/>          Lunch<form:checkbox path="Food" value="Lunch"/>          Dinner<form:checkbox path="Food" value="Dinner"/>          <br><br>          Leaving from: <form:select path="cityFrom">          <form:option value="Ghaziabad" label="Ghaziabad"/>          <form:option value="Modinagar" label="Modinagar"/>          <form:option value="Meerut" label="Meerut"/>          <form:option value="Amristar" label="Amristar"/>          </form:select>          <br><br>          Going to: <form:select path="cityTo">          <form:option value="Ghaziabad" label="Ghaziabad"/>          <form:option value="Modinagar" label="Modinagar"/>          <form:option value="Meerut" label="Meerut"/>          <form:option value="Amristar" label="Amristar"/>          </form:select>          <br><br>          <input type="submit" value="Submit" />      </form:form>  </body>  </html>  3.MVC pagination example:Spring MVC Pagination ExamplePagination is used to display a large number of records in different parts. In such case, we display 10, 20 or 50 records in one page. For remaining records, we provide links.We can simply create pagination example in Spring MVC. In this pagination example, we are using MySQL database to fetch records.->File Upload example:1) Add commons-io and fileupload.jar files2) Add entry of CommonsMultipartResolver in spring-servlet.xml3)Create form to submit file. Method name must be "post" and enctype "multiple/form-data".4)Use CommonsMultipartFile class in Controller.5)Display image in JSP.<h1>Upload Success</h1>  <img src="${filename}"/>  4.spring mvc validation:The Spring MVC Validation is used to restrict the input provided by the user. To validate the user's input, the Spring 4 or higherversion supports and use Bean Validation API. It can validate both server-side as well as client-side applications.Example:name=Malarpassword*=  (*) means it is mandatory to enter the corresponding field. Otherwise, the form generates an error.Annotation	Description@NotNull	It determines that the value can't be null.@Min	    It determines that the number must be equal or greater than the specified value.@Max	    It determines that the number must be equal or less than the specified value.@Size	    It determines that the size must be equal to the specified value.@Pattern	It determines that the sequence follows the specified regular expression.->Regular expression validation->Number validation->custom validation1.Regular expression validation:The Spring MVC Validation allows us to validate the user input in a particular sequence (i.e., regular expression). The @Pattern annotation is used to achieve regular expression validation. Here, we can provide the required regular expression to regexp attribute and pass it with the annotation.@Pattern(regexp="^[a-zA-Z0-9]{3}",message="length must be 3")  2.Number validationIn Spring MVC Validation, we can validate the user's input within a number range. ->@Min annotation - It is required to pass an integer value with @Min annotation. The user input must be equal to or greater than this value.->@Max annotation - It is required to pass an integer value with @Max annotation. The user input must be equal to or smaller than this value.@Size(min=1,message="required")      private String pass;            @Min(value=18, message="must be equal or greater than 18")      @Max(value=45, message="must be equal or less than 45") 3.custom validationThe Spring MVC framework allows us to perform custom validations. In such case, we declare own annotations. We can perform validation on the basis of own business logic.	we use both pre-defined annotations as well as custom annotations to validate user input.Example:  //Custom annotation      @Password      private String password;      //Predefined annotation      @Min(value=18, message="must be equal or greater than 18")      @Max(value=45, message="must be equal or less than 45")      private int age;      4.Spring MVC Tiles ExampleSpring provides integration support with apache tiles framework. So we can simply manage the layout of the Spring MVC application with thehelp of spring tiles support.advantage:ReusabilityCentralized controlEasy to change the layout1.Add dependencies to pom.xml file.2. Create the bean class3. Create the controller class4. Provide the entry of controller in the web.xml file5. Define the bean in the xml filespring-servlet.xml6. Provide the tiles.xml filetiles.xml7. Create the requested pageindex.jsp