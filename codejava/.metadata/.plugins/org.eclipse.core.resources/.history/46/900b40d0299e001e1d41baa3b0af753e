package leetcode;


public class TreeNode {
	class Tree {

		private int data;
		private Tree right;
		private Tree left;	

		public int getData() {
			return data;
		}
		public void setData(int data) {
			this.data = data;
		}
	}

	Tree rootNode;

	public void addTree(int data) {
		rootNode=addTreeRec(rootNode, data);
	}
	public Tree addTreeRec(Tree rootNode,int data) {
		if(rootNode==null) {
			rootNode = new Tree();
			rootNode.setData(data);
		}
		else if(data<rootNode.getData()) {
			rootNode.left=addTreeRec(rootNode.left, data);
		}else if(data>rootNode.getData()){
			rootNode.right=addTreeRec(rootNode.right, data);
		}

		return rootNode;
	}

	public void showDepth() {
		showDepthRec(rootNode);
	}
	public void showDepthRec(Tree rootNode) {
		if (rootNode!=null) {
			System.out.print(rootNode.getData()+" ");
			showDepthRec(rootNode.left);
			showDepthRec(rootNode.right);
		}
	}
	public Tree lowestCommonAncestor(Tree root,Tree p,Tree q) 
	{    
		if(root == null) return null;
		if(root == p || root == q) return root;
		Tree left =lowestCommonAncestor(root.left,p,q);       
		Tree right = lowestCommonAncestor(root.right,p,q);
		if(left != null && right != null) return root;
		return left == null? right: left;
	}

	public static void main(String[] args) {
		TreeNode t1 = new TreeNode();
		TreeNode t2 = new TreeNode();

		t1.addTree(10);
		t1.addTree(5);
		t1.addTree(12);
		t1.addTree(7);
		t1.addTree(15);
		t1.addTree(6);

		t2.lowestCommonAncestor(t1, 4, 15)
		t1.showDepth();

	}
}
