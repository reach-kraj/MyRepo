package leetcode;

import leetcode.SortLinkedList.Node;

public class SortList {
	public class ListNode {
		int val;
		ListNode next;
		ListNode() {}
		ListNode(int val) { this.val = val; }
		ListNode(int val, ListNode next) { this.val = val; this.next = next; }
	}
	ListNode head;
	public void add(int val) {
		ListNode container = new ListNode();
		container.val=val;
		if (head == null) {
			head = container;
		} else {
			ListNode tempNode = head;
			while (tempNode.next!= null) {
				tempNode = tempNode.next;
			}
			tempNode.next=container;
		}
	}

	public void show() {
		ListNode container = head;
		if(container==null) {
			System.out.println("list is empty");
		}else {
			while (container.next != null) {
				System.out.print(container.val+" ");
				container = container.next;
			}
			System.out.print(container.val+" ");
		}
	}

	public ListNode sortList(ListNode n1) {
		if(head==null||head.next==null){
			return n1;
		}
		ListNode temp=head;
		ListNode slow=head;
		ListNode fast=head;

		while(fast!=null&&fast.next!=null){
			temp=slow;
			slow=slow.next;
			fast=fast.next.next;
		}
		temp.next=null;
		
		ListNode left=sortList(head);
		ListNode right=sortList(slow);

		return mergeTwoLists(head,slow);
	}




	public static void main(String[] args) {

		SortList l1=new SortList();
		//SortList l2=new SortList();

		l1.add(50);
		l1.add(30);
		l1.add(40);
		l1.add(90);
		l1.add(70);
		l1.show();
		System.out.println("after");
		System.out.println(" ");
		l1.sortNode(l1);
		l1.show();
	}

}
