package leetcode;

import leetcode.CommonAncestor.Tree;

public class SortList {

	public class ListNode {
		int val;
		ListNode next;
		ListNode() {}
		ListNode(int val) { this.val = val; }
		ListNode(int val, ListNode next) { this.val = val; this.next = next; }
	}
	ListNode head;
	public void add(int val) {
		ListNode container = new ListNode();
		container.val=val;
		if (head == null) {
			head = container;
		} else {
			ListNode tempNode = head;
			while (tempNode.next!= null) {
				tempNode = tempNode.next;
			}
			tempNode.next=container;
		}
	}

	public void show() {
		ListNode container = head;
		if(container==null) {
			System.out.println("list is empty");
		}else {
			while (container.next != null) {
				System.out.print(container.val+" ");
				container = container.next;
			}
			System.out.print(container.val+" ");
		}
	}
	public void sort(SortList n1) {
		SortList temp=new SortList() ;
		temp=sortrec(n1);
	}

	public SortList sortrec(SortList n1) {
		if(head==null||head.next==null){
			return n1;
		}
		ListNode temp=head;
		ListNode slow=head;
		ListNode fast=head;

		while(fast!=null&&fast.next!=null){
			temp=slow;
			slow=slow.next;
			fast=fast.next.next;
		}
		temp.next=null;

		ListNode left=sortrec(head);
		ListNode right=sortrec(slow);

		mergeTwoLists(left,right);

		return n1;
	}
	public ListNode mergeTwoLists(ListNode l1, ListNode l2){
		if(l1 == null) return l2;
		if(l2 == null) return l1;
		if(l1.val < l2.val){
			l1.next = mergeTwoLists(l1.next, l2);
			return l1;
		} else{
			l2.next = mergeTwoLists(l1, l2.next);
			return l2;
		}
	}



	public static void main(String[] args) {
		
		SortList l1 =new SortList();
		SortList l2 =new SortList();
	
		l1.add(50);
		l1.add(70);
		l1.add(90);
		l1.add(40);
		l1.add(30);
		l1.show();
		l2.sort(l1);
		
	
		

	}

}
