package leetcode;


public class TreeNode {
	class Tree {

		private int data;
		private Tree right;
		private Tree left;

		public int getData() {
			return data;
		}
		public void setData(int data) {
			this.data = data;
		}
	}

	Tree rootNode;

	public void addTree(int data) {
		rootNode=addTreeRec(rootNode, data);
	}
	public Tree addTreeRec(Tree rootNode,int data) {
		if(rootNode==null) {
			rootNode = new Tree();
			rootNode.setData(data);
		}
		else if(data<rootNode.getData()) {
			rootNode.left=addTreeRec(rootNode.left, data);
		}else if(data>rootNode.getData()){
			rootNode.right=addTreeRec(rootNode.right, data);
		}

		return rootNode;
	}

	public void showDepth() {
		showDepthRec(rootNode);
	}
	public void showDepthRec(Tree rootNode) {
		if (rootNode!=null) {
			System.out.print(rootNode.getData()+" ");
			showDepthRec(rootNode.left);
			showDepthRec(rootNode.right);
		}
	}
	public void lowestCommonAncestor(TreeNode l1,int a,int b) {
		rootNode=lowestCommonAncestorrec(l1,a,b);
	}
	public TreeNode lowestCommonAncestorrec(TreeNode l1,int p,int q) {
		if(l1 == null || l1.rootNode.getData() == p || l1.rootNode.getData() == q) {
			return l1;
		}
		return rootNode;
	}

	public static void main(String[] args) {
		TreeNode t1 = new TreeNode();
		//TreeNode t2 = new TreeNode();

		t1.addTree(10);
		t1.addTree(5);
		t1.addTree(12);
		t1.addTree(11);
		t1.addTree(7);
		t1.addTree(15);
		t1.addTree(6);

		t1.lowestCommonAncestor(t1, 11, 15);
		t1.showDepth();

	}
}
