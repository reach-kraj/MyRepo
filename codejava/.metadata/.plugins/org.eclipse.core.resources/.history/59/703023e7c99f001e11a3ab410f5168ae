package leetcode;

public class SortList {
	class Node 
	{
		private int data;
		private Node next;

		public Node getNext() {
			return next;
		}
		public void setNext(Node next) {
			this.next = next;
		}
		public int getData() {
			return data;
		}
		public void setData(int data) {
			this.data = data;
		}
	}
	Node head;
	public void add(int data) {
		Node container = new Node();
		container.setData(data);
		if (head == null) {
			head = container;
		} else {
			Node tempNode = head;
			while (tempNode.getNext()!= null) {
				tempNode = tempNode.getNext();
			}
			tempNode.setNext(container);
		}
	}

	public void show() {
		Node container = head;
		if(container==null) {
			System.out.println("list is empty");
		}else {
			while (container.getNext() != null) {
				System.out.print(container.getData()+" ");
				container = container.getNext();
			}
			System.out.print(container.getData()+" ");
		}
	}

	public void sortNode() {
		Node temp=head;
		Node currNode=head.next;
		Node preNode=null;
		while(temp.next!=null) {
			if(temp.getData()<currNode.getData()) {
				temp=currNode;
				currNode=currNode.next;
			}else {
				preNode=temp;
				temp=currNode;
				temp.next=preNode;
				currNode=preNode.next;
			}
		}


	}

	public static void main(String[] args) {

		SortList l1=new SortList();
		l1.add(70);
		l1.add(30);
		l1.add(90);
		l1.add(50);
		l1.add(60);
		l1.show();
		System.out.println("after");
		System.out.println(" ");
		l1.sortNode();
		l1.show();
	}

}
