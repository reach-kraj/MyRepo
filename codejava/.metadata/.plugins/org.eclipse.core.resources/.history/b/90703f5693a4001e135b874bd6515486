package leetcode;


public class SortLinkedList {
	class Node 
	{
		private int data;
		private Node next;

		public Node getNext() {
			return next;
		}
		public void setNext(Node next) {
			this.next = next;
		}
		public int getData() {
			return data;
		}
		public void setData(int data) {
			this.data = data;
		}
	}
	Node head;

	public void add(int data) {
		Node container = new Node();
		container.setData(data);
		if (head == null) {
			head = container;
		} else {
			Node tempNode = head;
			while (tempNode.getNext()!= null) {
				tempNode = tempNode.getNext();
			}
			tempNode.setNext(container);
		}
	}

	public void show() {
		Node container = head;
		if(container==null) {
			System.out.println("list is empty");
		}else {
			while (container.getNext() != null) {
				System.out.print(container.getData()+" ");
				container = container.getNext();
			}
			System.out.print(container.getData()+" ");
		}
	}
	public void sorted() {
		//System.out.println("print head "+ head.getData());
		Node rootNode=head;
		sort(rootNode);
		show();
	}

	public Node sort(Node n1) {
		if(head==null||head.next==null){
			return head;
		}
		Node temp=head;
		Node slow=head;
		Node fast=head;

		while(fast!=null&&fast.next!=null){
			temp=slow;
			slow=slow.next;
			fast=fast.next.next;
		}
		temp.next=null;
		Node l1 = sort(head);
	    Node l2 = sort(slow);
	    
		return mergeTwoLists(l1,l2);
	}

	public Node mergeTwoLists(Node t1, Node t2){
		
		if(t1.getData() < t2.getData()){
			t1.setNext(mergeTwoLists(t1.next, t2));
			 
			return t1;
		} else{
			t2.next = mergeTwoLists(t1, t2.next);
			return t2;
		}


	}
	public static void main(String[] args) {

		SortLinkedList l1 =new SortLinkedList();
		SortLinkedList l2 =new SortLinkedList();

		l1.add(50);
		l1.add(30);
		l1.add(40);
		l1.add(70);
		l1.add(90);

		l1.sorted();
		l1.show();



	}
}
